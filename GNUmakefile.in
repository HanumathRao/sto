# @configure_input@

AR = ar
CC = @CC@
CXX = @CXX@
CPPFLAGS = -I$(MASSTREEDIR)
CXXFLAGS = -W -Wall
DEPSDIR := .deps
DEPCFLAGS = -MD -MF $(DEPSDIR)/$*.d -MP
LIBS = @LIBS@ -lpthread -lm
LDFLAGS = @LDFLAGS@
MASSTREEDIR = @MASSTREEDIR@

ifeq ($(PROFILE),1)
CXXFLAGS += -g -pg -fno-inline
endif

ifneq ($(OPT),0)
CXXFLAGS += -O3
endif

# debugging on by default
ifneq ($(NDEBUG),1)
CXXFLAGS += -g
endif

all: concurrent single singleelems array1 genericTest list1 vector pqueue rbtree trans_test ht_mt

%.o: %.c config.h $(DEPSDIR)/stamp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

%.o: %.cc config.h $(DEPSDIR)/stamp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

%.S: %.o
	objdump -S $< > $@

libjson.a: json.o string.o straccum.o str.o msgpack.o \
	clp.o kvrandom.o compiler.o kvthread.o
	@/bin/rm -f $@
	$(AR) cru $@ $^


MASSTREE_OBJS = $(MASSTREEDIR)/kvio.o \
	$(MASSTREEDIR)/misc.o \
	$(MASSTREEDIR)/checkpoint.o \
	$(MASSTREEDIR)/string_slice.o \
	$(MASSTREEDIR)/libjson.a

STO_OBJS = Transaction.o MassTrans.o

concurrent: concurrent.o clp.o $(STO_OBJS) $(MASSTREE_OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

single: single.o clp.o $(STO_OBJS) $(MASSTREE_OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

singleelems: singleelems.o clp.o $(STO_OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

array1: array1.o clp.o $(STO_OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

list1: list1.o clp.o $(STO_OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

vector: vector.o clp.o $(STO_OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

pqueue: pqueue.o clp.o $(STO_OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

rbtree: rbtree.o clp.o $(STO_OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

genericTest: genericTest.o clp.o $(STO_OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

trans_test: trans_test.o clp.o $(STO_OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

ht_mt: ht_mt.o clp.o $(STO_OBJS) $(MASSTREE_OBJS)
	$(CXX) $(CFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

$(MASSTREE_OBJS): masstree ;

.PHONY: masstree
masstree: $(MASSTREEDIR)/config.status
	$(MAKE) -C $(MASSTREEDIR)

config.h: stamp-h

GNUmakefile: GNUmakefile.in config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

configure config.h.in: configure.ac
	autoreconf -i
	touch config.h.in

config.status: configure
	./configure @ac_configure_args@

$(DEPSDIR)/stamp:
	mkdir -p $(DEPSDIR)
	touch $@

stamp-h: config.h.in config.status
	CONFIG_FILES= $(SHELL) ./config.status
	echo > stamp-h

clean:
	rm -f concurrent array single singleelems genericTest *.o libjson.a
	rm -f pqueue vector list1 rbtree trans_test ht_mt
	rm -rf .deps
	$(MAKE) -C $(MASSTREEDIR) clean

DEPFILES := $(wildcard $(DEPSDIR)/*.d)
ifneq ($(DEPFILES),)
include $(DEPFILES)
endif

.PHONY: clean all
