# @configure_input@

AR = ar
CC = @CC@
CXX = @CXX@
CFLAGS = -W -Wall
DEPSDIR := .deps
DEPCFLAGS = -MD -MF $(DEPSDIR)/$*.d -MP
LIBS = @LIBS@ -lpthread -lm
LDFLAGS = @LDFLAGS@

LDFLAGS += -lrt

ifeq ($(PROFILE),1)
CFLAGS += -g -pg -fno-inline
endif

ifneq ($(OPT),0)
CFLAGS += -O3
endif

# debugging on by default
ifneq ($(NDEBUG),1)
CFLAGS += -g
endif


SRCFILES = Checkpointer.cc \
  Recovery.cc

OBJFILES := $(patsubst %.cc, %.o, $(SRCFILES))

UTIL_SRCFILES = benchmarks/util/allocator.cc \
	benchmarks/util/core.cc \
	benchmarks/util/counter.cc \
	benchmarks/util/rcu.cc \
	benchmarks/util/thread.cc \
	benchmarks/util/ticker.cc \
	benchmarks/util/stats_server.cc \
	benchmarks/util/varint.cc \

UTIL_OBJFILES := $(patsubst %.cc, %.o, $(UTIL_SRCFILES))

BENCH_CXXFLAGS := $(CXXFLAGS)
BENCH_LDFLAGS := $(LDFLAGS) -ldb_cxx

BENCH_SRCFILES = benchmarks/mbta_wrapper.cc \
	benchmarks/bench.cc \
	benchmarks/masstree/kvrandom.cc \
	benchmarks/queue.cc \
	benchmarks/tpcc.cc \
	benchmarks/ycsb.cc

BENCH_CXXFLAGS += -DNO_MYSQL

BENCH_OBJFILES := $(patsubst %.cc, %.o, $(BENCH_SRCFILES))

all: concurrent single singleelems array1 committid genericTest

benchmarks/util/%.o: benchmarks/util/%.cc config.h $(DEPSDIR)/stamp
	$(CXX) $(BENCH_CXXFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

benchmarks/masstree/%.o: benchmarks/masstree/%.cc config.h $(DEPSDIR)/stamp
	$(CXX) $(BENCH_CXXFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

benchmarks/%.o: benchmarks/%.cc config.h $(DEPSDIR)/stamp
	$(CXX) $(BENCH_CXXFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

%.o: %.c config.h $(DEPSDIR)/stamp
	$(CXX) $(CFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

%.o: %.cc config.h $(DEPSDIR)/stamp
	$(CXX) $(CFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

%.S: %.o
	objdump -S $< > $@

libjson.a: json.o string.o straccum.o str.o msgpack.o \
	clp.o kvrandom.o compiler.o kvthread.o
	@/bin/rm -f $@
	$(AR) cru $@ $^


KVTREES = masstree-beta/string_slice.o

MASSTREE_OBJS = masstree-beta/kvio.o masstree-beta/misc.o masstree-beta/checkpoint.o $(KVTREES) masstree-beta/libjson.a

STO_OBJS = Transaction.o Logger.o MassTrans.o

concurrent: concurrent.o clp.o $(STO_OBJS) $(MASSTREE_OBJS)
	$(CXX) $(CFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

single: single.o clp.o $(STO_OBJS) $(MASSTREE_OBJS)
	$(CXX) $(CFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

singleelems: singleelems.o clp.o $(STO_OBJS)
	$(CXX) $(CFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

array1: array1.o clp.o $(STO_OBJS)
	$(CXX) $(CFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

genericTest: genericTest.o clp.o $(STO_OBJS)
	$(CXX) $(CFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

committid: committid.o clp.o $(STO_OBJS) $(OBJFILES) $(MASSTREE_OBJS)
	$(CXX) $(CFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

$(MASSTREE_OBJS): masstree ;

.PHONY: masstree
masstree: masstree-beta/config.status
	$(MAKE) -C masstree-beta

.PHONY: dbtest
dbtest: benchmarks/dbtest

benchmarks/dbtest: benchmarks/dbtest.o $(STO_OBJS) $(OBJFILES) $(UTIL_OBJFILES) $(MASSTREE_OBJS)  $(BENCH_OBJFILES)
	$(CXX) $(CFLAGS) -o $@ $^ $(BENCH_LDFLAGS) $(LIBS)
	

config.h: stamp-h

GNUmakefile: GNUmakefile.in config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

configure config.h.in: configure.ac
	autoreconf -i
	touch config.h.in

config.status: configure
	./configure @ac_configure_args@

$(DEPSDIR)/stamp:
	mkdir -p $(DEPSDIR)
	touch $@

stamp-h: config.h.in config.status
	CONFIG_FILES= $(SHELL) ./config.status
	echo > stamp-h

clean:
	rm -f concurrent array single singleelems committid *.o libjson.a genericTest *.o
	rm -f benchmarks/*.o benchmarks/util/*.o benchmarks/masstree/*.o
	rm -rf .deps
	$(MAKE) -C masstree-beta clean

DEPFILES := $(wildcard $(DEPSDIR)/*.d)
ifneq ($(DEPFILES),)
include $(DEPFILES)
endif

.PHONY: clean all
